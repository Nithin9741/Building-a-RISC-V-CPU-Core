Inverter

*Unlike Verilog, there was no need to declare your signals (wires) ($out and $in1). 
*In TL-Verilog, your assignment statement acts as the declaration of its output signal(s).
*This circuit has a dangling input signal and a dangling output signal. It also probably has a dangling $reset signal that was provided in the template.
*These result in non-fatal warning/error conditions. They are reported, but they do not prevent simulation


**In place of "//...", type "$out = ! $in1;". Be sure to preserve the 3-spaces of indentation, similar to the surrounding expressions. This is an inverter
Why we are usiing the TL-Verilog means
Important note: We where are using Makerchip 
TL-Verilog defines syntax very rigidly. This can be a source of annoyance for newcomers with their own coding style preferences. But this rigidity has an important benefit.
In industry, code is touched by many hands from many teams, and this rigidity enforces consistency. The TL-Verilog Syntax Specification can be found from the Makerchip "Help" menu,
but we will cover the necessary points as we go

Boolean Logic Expression 
TLV Sytax
$foo = (  $val1 &&   $val2) || (! $val1 && ! $val2);
Below is the Flow chart by that you can understand

